#version 450
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D textureSampler;

layout(location = 0) uniform dvec2 topLeftCorner;
layout(location = 1) uniform dvec2 bottomRightCorner;

#define centerColor vec4(0.0f, 0.0f, 0.0f, 1.0f)
#define iterations 1000

#define cx_mul(a, b) dvec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)
#define squareLength(a) abs(a.x*a.x+a.y*a.y)

//https://gist.github.com/983/e170a24ae8eba2cd174f

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec4 getColor(int i) {
	int repeat = 20;
	float h = float(i % repeat) / repeat;
	vec3 color = hsv2rgb(vec3(h, 1.0f, 1.0f));
	return vec4(color, 1.0f);
	
	
	//return vec4(i/100.0f, i/100.0f, 0.0f, 1.0f);
}

void main() {
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
	
	dvec2 screenPos = dvec2(gl_GlobalInvocationID.xy) / (dvec2(gl_NumWorkGroups.xy) * 8.0);
	dvec2 c = mix(topLeftCorner, bottomRightCorner, screenPos);

	dvec2 z = dvec2(0.0f, 0.0f);
	int i;
	for(i = 0; i < iterations; i++) {
		z = cx_mul(z, z) + c;
		if (squareLength(z) > 4.0f) {
			break;
		}
	}

	vec4 pixelColor = i == iterations ? centerColor : getColor(i);

	imageStore(textureSampler, pixelCoords, pixelColor);
}
